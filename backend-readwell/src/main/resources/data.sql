
CREATE TABLE IF NOT EXISTS test_data (
     id SERIAL PRIMARY KEY,
     message VARCHAR(255) NOT NULL
);

INSERT INTO test_data (message) VALUES ('Hello from the database!');

-- Creating Users table
CREATE TABLE IF NOT EXISTS readwell_users (
     id bigint generated by default as identity,
     email varchar(255),
    is_admin boolean not null,
    password varchar(255),
    primary key (id)
);

CREATE TABLE IF NOT EXISTS generated_otp (
    id bigint generated by default as identity,
    email varchar(255) NOT NULL,
    otp varchar(6) NOT NULL,
    primary key (id)
);

-- Creating Klass table
CREATE TABLE IF NOT EXISTS klasses (
    id bigint generated by default as identity,
    name varchar(255) NOT NULL,
    primary key (id)
);

-- Creating Subjects table
CREATE TABLE IF NOT EXISTS subjects (
    id bigint generated by default as identity,
    name varchar(255) NOT NULL,
    klass_id bigint,
    primary key (id),
    foreign key (klass_id) references klasses(id) on delete cascade
);


-- Creating Topics table
CREATE TABLE IF NOT EXISTS topics (
    id bigint generated by default as identity,
    name varchar(255) NOT NULL,
    subject_id bigint,
    primary key (id),
    foreign key (subject_id) references subjects(id) on delete cascade
);

-- Creating Questions table
CREATE TABLE IF NOT EXISTS questions (
    id bigint generated by default as identity,
    question_text varchar(255) NOT NULL,
    options jsonb NOT NULL, -- Store options as JSON
    correct_answer varchar(255) NOT NULL,
    topic_id bigint,
    primary key (id),
    foreign key (topic_id) references topics(id) on delete cascade
);


-- INSERT INTO users (email, password, is_admin) VALUES ('admin@example.com', 'admin', TRUE);
-- Example insert statement (optional)
-- INSERT INTO users (email, password, is_admin) VALUES ('admin@example.com', 'hashed_password', TRUE);
